#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ pics –∏–∑ WB —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –æ—Ç Mayak
"""

from wb_parser import WBParser
import json


def test_wb_data_extraction():
    """–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ pics –∏–∑ WB"""
    print("üß™ –¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ pics...")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –æ—Ç WB API
    mock_wb_response = {
        "products": [
            {"id": 306897066, "pics": 13, "name": "–ö—É—Ä—Ç–∫–∞ 1"},
            {"id": 164105063, "pics": 8, "name": "–ö—É—Ä—Ç–∫–∞ 2"},
            {"id": 244733060, "pics": 15, "name": "–ö—É—Ä—Ç–∫–∞ 3"}
        ],
        "total": 1000
    }
    
    parser = WBParser()
    wb_products = parser.extract_products_with_pics(mock_wb_response)
    
    expected_keys = [306897066, 164105063, 244733060]
    
    if (len(wb_products) == 3 and 
        all(key in wb_products for key in expected_keys) and
        wb_products[306897066]['pics'] == 13):
        print("‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ pics —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print(f"–ü—Ä–∏–º–µ—Ä: ID {306897066} –∏–º–µ–µ—Ç {wb_products[306897066]['pics']} —Ñ–æ—Ç–æ")
        return True
    else:
        print("‚ùå –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ pics –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return False


def test_data_combination():
    """–¢–µ—Å—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö WB –∏ Mayak"""
    print("\nüß™ –¢–µ—Å—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö...")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Mayak (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º)
    mayak_data = [
        {'id': '244733060', 'sales': 15678, 'revenue': 45234567, 'avg_price': 2885},
        {'id': '306897066', 'sales': 12450, 'revenue': 35678901, 'avg_price': 2867},
        {'id': '164105063', 'sales': 8765, 'revenue': 25123456, 'avg_price': 2867}
    ]
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç WB
    wb_data = {
        306897066: {'pics': 13, 'wb_data': {'name': '–ö—É—Ä—Ç–∫–∞ 1'}},
        164105063: {'pics': 8, 'wb_data': {'name': '–ö—É—Ä—Ç–∫–∞ 2'}},
        244733060: {'pics': 15, 'wb_data': {'name': '–ö—É—Ä—Ç–∫–∞ 3'}}
    }
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ (–∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è –≤ –º–µ—Ç–æ–¥–µ)
    combined_products = []
    for mayak_product in mayak_data:
        product_id = int(mayak_product.get('id', 0))
        
        if product_id in wb_data:
            mayak_product['pics'] = wb_data[product_id]['pics']
        else:
            mayak_product['pics'] = 0
        
        combined_products.append(mayak_product)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (len(combined_products) == 3 and
        combined_products[0]['id'] == '244733060' and  # –°–∞–º—ã–π –ø—Ä–æ–¥–∞–≤–∞–µ–º—ã–π
        combined_products[0]['pics'] == 15 and
        combined_products[1]['pics'] == 13 and
        combined_products[2]['pics'] == 8):
        print("‚úÖ –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("–†–µ–∑—É–ª—å—Ç–∞—Ç (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º):")
        for i, product in enumerate(combined_products, 1):
            print(f"  {i}. ID {product['id']}: {product['sales']:,} –ø—Ä–æ–¥–∞–∂, {product['pics']} —Ñ–æ—Ç–æ")
        return True
    else:
        print("‚ùå –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return False


def demo_final_output():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞"""
    print("\nüéØ –î–ï–ú–û: –§–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥")
    print("=" * 50)
    
    # –ü—Ä–∏–º–µ—Ä —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    final_products = [
        {'id': '315813991', 'sales': 23456, 'pics': 12},
        {'id': '244733060', 'sales': 15678, 'pics': 15},
        {'id': '306897066', 'sales': 12450, 'pics': 13},
        {'id': '164105063', 'sales': 8765, 'pics': 8},
        {'id': '64775386', 'sales': 7193, 'pics': 5}
    ]
    
    print("üìã –°–ü–ò–°–û–ö –¢–û–í–ê–†–û–í (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º):")
    print("ID —Ç–æ–≤–∞—Ä–∞ | –ü—Ä–æ–¥–∞–∂–∏ | –§–æ—Ç–æ")
    print("-" * 30)
    
    for product in final_products:
        product_id = product.get('id')
        sales = product.get('sales', 0)
        pics = product.get('pics', 0)
        print(f"{product_id} | {sales:,} | {pics}")
    
    print(f"\n–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(final_products)}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ pics —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö")
    print("=" * 60)
    
    tests = [
        test_wb_data_extraction,
        test_data_combination
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        if test():
            passed += 1
    
    print("\n" + "=" * 60)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–º–æ
    demo_final_output()
    
    return passed == total


if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)

