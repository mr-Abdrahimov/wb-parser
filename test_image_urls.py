#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è WildBerries
"""

from wb_parser import WBParser


def test_image_url_generation():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
    
    parser = WBParser()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö ID
    test_cases = [
        {
            'product_id': 164105063,
            'pics': 8,
            'expected_vol': 1641,
            'expected_part': 164105,
            'expected_host': '11'  # vol 1641 –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –¥–∏–∞–ø–∞–∑–æ–Ω 1602-1655 = host 11
        },
        {
            'product_id': 306897066,
            'pics': 13,
            'expected_vol': 3068,
            'expected_part': 306897,
            'expected_host': '19'  # vol 3068 > 2447 = host 19
        },
        {
            'product_id': 64775386,
            'pics': 5,
            'expected_vol': 647,
            'expected_part': 64775,
            'expected_host': '04'  # vol 647 –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –¥–∏–∞–ø–∞–∑–æ–Ω 432-719 = host 04
        }
    ]
    
    all_passed = True
    
    for i, case in enumerate(test_cases, 1):
        product_id = case['product_id']
        pics = case['pics']
        expected_vol = case['expected_vol']
        expected_part = case['expected_part']
        expected_host = case['expected_host']
        
        print(f"\n  –¢–µ—Å—Ç {i}: ID {product_id}, {pics} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏
        image_urls = parser.generate_image_urls(product_id, pics)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫
        if len(image_urls) != pics:
            print(f"    ‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫: {len(image_urls)} –≤–º–µ—Å—Ç–æ {pics}")
            all_passed = False
            continue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—É—é —Å—Å—ã–ª–∫—É
        first_url = image_urls[0]
        expected_first_url = f"https://basket-{expected_host}.wbbasket.ru/vol{expected_vol}/part{expected_part}/{product_id}/images/big/1.webp"
        
        if first_url == expected_first_url:
            print(f"    ‚úÖ –ü–µ—Ä–≤–∞—è —Å—Å—ã–ª–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞: {first_url}")
        else:
            print(f"    ‚ùå –ü–µ—Ä–≤–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ–≤–µ—Ä–Ω–∞:")
            print(f"       –ü–æ–ª—É—á–µ–Ω–æ: {first_url}")
            print(f"       –û–∂–∏–¥–∞–ª–æ—Å—å: {expected_first_url}")
            all_passed = False
            continue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Å—ã–ª–∫—É
        if pics > 1:
            last_url = image_urls[-1]
            expected_last_url = f"https://basket-{expected_host}.wbbasket.ru/vol{expected_vol}/part{expected_part}/{product_id}/images/big/{pics}.webp"
            
            if last_url == expected_last_url:
                print(f"    ‚úÖ –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Å—ã–ª–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞: {last_url}")
            else:
                print(f"    ‚ùå –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Å—ã–ª–∫–∞ –Ω–µ–≤–µ—Ä–Ω–∞:")
                print(f"       –ü–æ–ª—É—á–µ–Ω–æ: {last_url}")
                print(f"       –û–∂–∏–¥–∞–ª–æ—Å—å: {expected_last_url}")
                all_passed = False
        
        print(f"    üìä –í—Å–µ–≥–æ —Å—Å—ã–ª–æ–∫: {len(image_urls)}")
    
    return all_passed


def test_edge_cases():
    """–¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤"""
    print("\nüß™ –¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤...")
    
    parser = WBParser()
    
    # –°–ª—É—á–∞–π —Å 0 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    urls_zero = parser.generate_image_urls(123456789, 0)
    if len(urls_zero) == 0:
        print("  ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ 0 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    else:
        print(f"  ‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ 0 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: –ø–æ–ª—É—á–µ–Ω–æ {len(urls_zero)} —Å—Å—ã–ª–æ–∫")
        return False
    
    # –°–ª—É—á–∞–π —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    urls_many = parser.generate_image_urls(123456789, 25)
    if len(urls_many) == 25:
        print("  ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    else:
        print(f"  ‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: –ø–æ–ª—É—á–µ–Ω–æ {len(urls_many)} –≤–º–µ—Å—Ç–æ 25")
        return False
    
    return True


def demo_real_urls():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫"""
    print("\nüéØ –î–ï–ú–û: –†–µ–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    print("=" * 60)
    
    parser = WBParser()
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π ID –∏–∑ –ø—Ä–∏–º–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    real_id = 164105063
    pics_count = 8
    
    print(f"–¢–æ–≤–∞—Ä ID: {real_id}")
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {pics_count}")
    print()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å—á–µ—Ç—ã
    vol = real_id // 100000
    part = real_id // 1000
    print(f"vol = {real_id} // 100000 = {vol}")
    print(f"part = {real_id} // 1000 = {part}")
    print(f"–°–µ—Ä–≤–µ—Ä –¥–ª—è vol {vol}: basket-11 (–¥–∏–∞–ø–∞–∑–æ–Ω 1602-1655)")
    print()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏
    image_urls = parser.generate_image_urls(real_id, pics_count)
    
    print("üñºÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏:")
    for i, url in enumerate(image_urls, 1):
        print(f"  {i}. {url}")
    
    print(f"\nüìä –í—Å–µ–≥–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {len(image_urls)} —Å—Å—ã–ª–æ–∫")
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –ø–µ—Ä–≤–∞—è —Å—Å—ã–ª–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∏–º–µ—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    expected_url = "https://basket-11.wbbasket.ru/vol1641/part164105/164105063/images/big/1.webp"
    if image_urls[0] == expected_url:
        print("‚úÖ –ü–µ—Ä–≤–∞—è —Å—Å—ã–ª–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∏–º–µ—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
    else:
        print("‚ùå –ü–µ—Ä–≤–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∏–º–µ—Ä—É")
        print(f"–û–∂–∏–¥–∞–ª–æ—Å—å: {expected_url}")
        print(f"–ü–æ–ª—É—á–µ–Ω–æ:  {image_urls[0]}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è WB")
    print("=" * 70)
    
    tests = [
        test_image_url_generation,
        test_edge_cases
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        if test():
            passed += 1
    
    print("\n" + "=" * 70)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–º–æ
    demo_real_urls()
    
    return passed == total


if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)
