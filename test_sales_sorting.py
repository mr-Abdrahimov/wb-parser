#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º
"""

from mayak_api import MayakAPI
from wb_parser import WBParser
import json


def test_data_transformation():
    """–¢–µ—Å—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ Mayak API"""
    print("üß™ –¢–µ—Å—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö...")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –æ—Ç Mayak API
    mock_response = {
        "64775386": {
            "sales": 7193,
            "revenue": 19747579,
            "lost_revenue": 11161879,
            "avg_price": 2689
        },
        "306897066": {
            "sales": 12450,
            "revenue": 35678901,
            "lost_revenue": 8765432,
            "avg_price": 2867
        },
        "164105063": {
            "sales": 3456,
            "revenue": 9876543,
            "lost_revenue": 2345678,
            "avg_price": 2856
        }
    }
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç API
    products_list = []
    for product_id, product_data in mock_response.items():
        product_info = product_data.copy()
        product_info['id'] = product_id
        products_list.append(product_info)
    
    print(f"‚úÖ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ {len(products_list)} —Ç–æ–≤–∞—Ä–æ–≤")
    print(f"–ü—Ä–∏–º–µ—Ä —Ç–æ–≤–∞—Ä–∞: {products_list[0]}")
    return products_list


def test_sales_sorting():
    """–¢–µ—Å—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º"""
    print("\nüß™ –¢–µ—Å—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º...")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    products = test_data_transformation()
    
    api = MayakAPI()
    sorted_products = api.sort_products_by_sales(products, reverse=True)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç
    sales_values = [p.get('sales', 0) for p in sorted_products]
    is_sorted = all(sales_values[i] >= sales_values[i+1] for i in range(len(sales_values)-1))
    
    if is_sorted:
        print("‚úÖ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("–ü–æ—Ä—è–¥–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º:")
        for i, product in enumerate(sorted_products, 1):
            print(f"  {i}. ID {product['id']}: {product['sales']:,} –ø—Ä–æ–¥–∞–∂")
        return True
    else:
        print("‚ùå –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return False


def test_table_formatting():
    """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã"""
    print("\nüß™ –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã...")
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    products = test_data_transformation()
    api = MayakAPI()
    sorted_products = api.sort_products_by_sales(products, reverse=True)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É
    table = api.format_products_table(sorted_products)
    
    if "–¢–û–í–ê–†–´ –ü–û –ü–†–û–î–ê–ñ–ê–ú" in table and "ID —Ç–æ–≤–∞—Ä–∞" in table:
        print("‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("\n–ü—Ä–∏–º–µ—Ä —Ç–∞–±–ª–∏—Ü—ã:")
        print(table)
        return True
    else:
        print("‚ùå –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return False


def test_integration_with_parser():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –ø–∞—Ä—Å–µ—Ä–æ–º"""
    print("\nüß™ –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å WBParser...")
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä –±–µ–∑ cookies (–¥–ª—è –¥–µ–º–æ)
    parser = WBParser()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    products = test_data_transformation()
    api = MayakAPI()
    sorted_products = api.sort_products_by_sales(products, reverse=True)
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä —Å API –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ç–æ–¥–∞
    parser_with_api = WBParser()
    parser_with_api.mayak_api = api
    
    display_result = parser_with_api.display_products_by_sales(sorted_products, limit=3)
    
    if "–¢–û–í–ê–†–´ –ü–û –ü–†–û–î–ê–ñ–ê–ú" in display_result:
        print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å WBParser —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("–ü—Ä–∏–º–µ—Ä –≤—ã–≤–æ–¥–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –≤ 3 —Ç–æ–≤–∞—Ä–∞:")
        print(display_result)
        return True
    else:
        print("‚ùå –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å WBParser –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return False


def demo_real_data_structure():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüéØ –î–ï–ú–û: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö Mayak API")
    print("=" * 50)
    
    # –ü—Ä–∏–º–µ—Ä —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    real_response = {
        "64775386": {
            "sales": 7193,
            "revenue": 19747579,
            "lost_revenue": 11161879,
            "avg_price": 2689
        },
        "306897066": {
            "sales": 12450,
            "revenue": 35678901,
            "lost_revenue": 8765432,
            "avg_price": 2867
        },
        "164105063": {
            "sales": 3456,
            "revenue": 9876543,
            "lost_revenue": 2345678,
            "avg_price": 2856
        }
    }
    
    print("üì• –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç Mayak API:")
    print(json.dumps(real_response, indent=2, ensure_ascii=False))
    
    print("\nüîÑ –ü–æ—Å–ª–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏:")
    products_list = []
    for product_id, product_data in real_response.items():
        product_info = product_data.copy()
        product_info['id'] = product_id
        products_list.append(product_info)
    
    api = MayakAPI()
    sorted_products = api.sort_products_by_sales(products_list, reverse=True)
    
    print(api.format_products_table(sorted_products))


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º")
    print("=" * 60)
    
    tests = [
        test_sales_sorting,
        test_table_formatting,
        test_integration_with_parser
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        if test():
            passed += 1
    
    print("\n" + "=" * 60)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–º–æ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤
    demo_real_data_structure()
    
    return passed == total


if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)
