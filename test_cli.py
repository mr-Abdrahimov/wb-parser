#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç CLI —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ WB Parser
"""

import subprocess
import sys
import json
import os


def run_cli_command(args):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç CLI –∫–æ–º–∞–Ω–¥—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    cmd = [sys.executable, "wb_cli.py"] + args
    try:
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
        return result.returncode, result.stdout, result.stderr
    except subprocess.TimeoutExpired:
        return -1, "", "Timeout"


def test_basic_search():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
    print("üß™ –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞...")
    returncode, stdout, stderr = run_cli_command(["-q", "—Ç–µ—Å—Ç"])
    
    if returncode == 0 and "üì¶ –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ" in stdout:
        print("‚úÖ –ë–∞–∑–æ–≤—ã–π –ø–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return True
    else:
        print(f"‚ùå –ë–∞–∑–æ–≤—ã–π –ø–æ–∏—Å–∫ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {stderr}")
        return False


def test_json_format():
    """–¢–µ—Å—Ç JSON —Ñ–æ—Ä–º–∞—Ç–∞"""
    print("üß™ –¢–µ—Å—Ç JSON —Ñ–æ—Ä–º–∞—Ç–∞...")
    returncode, stdout, stderr = run_cli_command(["-q", "—Ç–µ—Å—Ç", "--quiet", "--format", "json"])
    
    if returncode == 0:
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å –≤–µ—Å—å –≤—ã–≤–æ–¥ –∫–∞–∫ JSON
            json_data = json.loads(stdout.strip())
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É JSON
            if (isinstance(json_data, dict) and 
                'query' in json_data and 
                'count' in json_data and 
                'product_ids' in json_data and
                isinstance(json_data['product_ids'], list)):
                print("‚úÖ JSON —Ñ–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç")
                return True
            else:
                print("‚ùå JSON —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è")
                return False
        except json.JSONDecodeError as e:
            print(f"‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON: {e}")
            return False
    else:
        print(f"‚ùå JSON —Ñ–æ—Ä–º–∞—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {stderr}")
        return False


def test_save_file():
    """–¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª"""
    print("üß™ –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª...")
    test_file = "test_output.txt"
    
    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if os.path.exists(test_file):
        os.remove(test_file)
    
    returncode, stdout, stderr = run_cli_command(["-q", "—Ç–µ—Å—Ç", "--save", test_file])
    
    if returncode == 0 and os.path.exists(test_file):
        print("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª —Ä–∞–±–æ—Ç–∞–µ—Ç")
        os.remove(test_file)  # –û—á–∏—â–∞–µ–º
        return True
    else:
        print(f"‚ùå –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {stderr}")
        return False


def test_help():
    """–¢–µ—Å—Ç —Å–ø—Ä–∞–≤–∫–∏"""
    print("üß™ –¢–µ—Å—Ç —Å–ø—Ä–∞–≤–∫–∏...")
    returncode, stdout, stderr = run_cli_command(["--help"])
    
    if returncode == 0 and "usage:" in stdout:
        print("‚úÖ –°–ø—Ä–∞–≤–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return True
    else:
        print(f"‚ùå –°–ø—Ä–∞–≤–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {stderr}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CLI —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")
    print("=" * 50)
    
    tests = [
        test_help,
        test_basic_search,
        test_json_format,
        test_save_file
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        if test():
            passed += 1
        print()
    
    print("=" * 50)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return True
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
