#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
WildBerries CLI Parser
–ü–∞—Ä—Å–µ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
"""

import argparse
import sys
from wb_parser import WBParser


def parse_arguments():
    """–ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    parser = argparse.ArgumentParser(
        description='WildBerries Parser - –ø–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–æ–≤ —Å WB',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog='''
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  %(prog)s -q "–∫—É—Ä—Ç–∫–∞ –∂–µ–Ω—Å–∫–∞—è —á–µ—Ä–Ω–∞—è"
  %(prog)s --query "iPhone" --page 2
  %(prog)s -q "—Ç–µ–ª–µ—Ñ–æ–Ω Samsung" --save
  %(prog)s -q "–∫—Ä–æ—Å—Å–æ–≤–∫–∏ Nike" -p 1 -s results.txt
  %(prog)s --query "–Ω–æ—É—Ç–±—É–∫" --pages 3 --save
        '''
    )
    
    parser.add_argument(
        '-q', '--query',
        type=str,
        required=True,
        help='–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä)'
    )
    
    parser.add_argument(
        '-p', '--page',
        type=int,
        default=1,
        help='–ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1)'
    )
    
    parser.add_argument(
        '--pages',
        type=int,
        help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ (–∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å 1 –ø–æ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É)'
    )
    
    parser.add_argument(
        '-s', '--save',
        type=str,
        nargs='?',
        const='auto',
        help='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª. –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∏–º—è —Ñ–∞–π–ª–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–º—è'
    )
    
    parser.add_argument(
        '--total',
        action='store_true',
        help='–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤'
    )
    
    parser.add_argument(
        '--quiet',
        action='store_true',
        help='–¢–∏—Ö–∏–π —Ä–µ–∂–∏–º - —Ç–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –±–µ–∑ –ª–æ–≥–æ–≤'
    )
    
    parser.add_argument(
        '--format',
        choices=['list', 'json', 'csv'],
        default='list',
        help='–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: list)'
    )
    
    return parser.parse_args()


def format_output(product_ids, query, format_type='list'):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    if format_type == 'json':
        import json
        result = {
            'query': query,
            'count': len(product_ids),
            'product_ids': product_ids
        }
        return json.dumps(result, ensure_ascii=False, indent=2)
    
    elif format_type == 'csv':
        lines = ['query,product_id']
        for product_id in product_ids:
            lines.append(f'"{query}",{product_id}')
        return '\n'.join(lines)
    
    else:  # list format
        lines = [f"–ó–∞–ø—Ä–æ—Å: {query}"]
        lines.append(f"–ù–∞–π–¥–µ–Ω–æ: {len(product_ids)} —Ç–æ–≤–∞—Ä–æ–≤")
        lines.append("ID —Ç–æ–≤–∞—Ä–æ–≤:")
        for i, product_id in enumerate(product_ids, 1):
            lines.append(f"{i:3d}. {product_id}")
        return '\n'.join(lines)


def save_results(product_ids, query, filename, format_type='list'):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª"""
    if filename == 'auto':
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        safe_query = query.replace(' ', '_').replace('/', '_').replace('\\', '_')
        if format_type == 'json':
            filename = f"wb_{safe_query}.json"
        elif format_type == 'csv':
            filename = f"wb_{safe_query}.csv"
        else:
            filename = f"wb_{safe_query}.txt"
    
    try:
        content = format_output(product_ids, query, format_type)
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(content)
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI"""
    args = parse_arguments()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç quiet —Ä–µ–∂–∏–º–∞
    if args.quiet:
        import logging
        logging.getLogger().setLevel(logging.ERROR)
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä
    wb_parser = WBParser()
    
    if not args.quiet:
        print(f"üîç –ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{args.query}'")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ
    if args.total and not args.quiet:
        total = wb_parser.get_total_products(args.query)
        print(f"üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {total}")
    
    all_product_ids = []
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
    if args.pages:
        pages_to_load = list(range(1, args.pages + 1))
        if not args.quiet:
            print(f"üìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º {args.pages} —Å—Ç—Ä–∞–Ω–∏—Ü...")
    else:
        pages_to_load = [args.page]
        if args.page != 1 and not args.quiet:
            print(f"üìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É {args.page}...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    for page_num in pages_to_load:
        if not args.quiet and len(pages_to_load) > 1:
            print(f"‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num}...")
        
        product_ids = wb_parser.search_products(args.query, page_num)
        
        if not product_ids:
            if not args.quiet:
                print(f"‚ö†Ô∏è  –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_num} —Ç–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            break
        
        all_product_ids.extend(product_ids)
        
        if not args.quiet and len(pages_to_load) > 1:
            print(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num}: –Ω–∞–π–¥–µ–Ω–æ {len(product_ids)} —Ç–æ–≤–∞—Ä–æ–≤")
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if all_product_ids:
        if not args.quiet:
            print(f"\nüì¶ –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ {len(all_product_ids)} ID —Ç–æ–≤–∞—Ä–æ–≤")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            output = format_output(all_product_ids, args.query, args.format)
            print("\n" + "="*60)
            print(output)
            print("="*60)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ
        if args.save:
            save_results(all_product_ids, args.query, args.save, args.format)
        
        # –í —Ç–∏—Ö–æ–º —Ä–µ–∂–∏–º–µ –≤—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if args.quiet:
            if args.format == 'json':
                print(format_output(all_product_ids, args.query, 'json'))
            elif args.format == 'csv':
                print(format_output(all_product_ids, args.query, 'csv'))
            else:
                for product_id in all_product_ids:
                    print(product_id)
    
    else:
        if not args.quiet:
            print("‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        sys.exit(1)


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
    except Exception as e:
        print(f"\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
