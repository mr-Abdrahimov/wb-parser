#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
WildBerries Full CLI Parser
–ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π CLI –ø–∞—Ä—Å–µ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Mayak API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
"""

import argparse
import sys
import json
import os
from wb_parser import WBParser
from mayak_api import MayakAPI, parse_cookies_string


def parse_arguments():
    """–ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    parser = argparse.ArgumentParser(
        description='WildBerries Full Parser - –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog='''
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  # –¢–æ–ª—å–∫–æ –ø–æ–∏—Å–∫ ID
  %(prog)s -q "–∫—É—Ä—Ç–∫–∞ –∂–µ–Ω—Å–∫–∞—è —á–µ—Ä–Ω–∞—è"
  
  # –ü–æ–∏—Å–∫ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
  %(prog)s -q "iPhone" --detailed --cookies "cookie1=value1; cookie2=value2"
  
  # –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö ID
  %(prog)s --ids 123456,789012 --detailed --cookies-file cookies.txt
  
  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
  %(prog)s -q "—Ç–µ–ª–µ—Ñ–æ–Ω" --detailed --save results.json --cookies-file cookies.txt
        '''
    )
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
    search_group = parser.add_argument_group('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞')
    search_group.add_argument(
        '-q', '--query',
        type=str,
        help='–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å'
    )
    
    search_group.add_argument(
        '--ids',
        type=str,
        help='–°–ø–∏—Å–æ–∫ ID —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –ø–æ–∏—Å–∫—É)'
    )
    
    search_group.add_argument(
        '-p', '--page',
        type=int,
        default=1,
        help='–ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1)'
    )
    
    search_group.add_argument(
        '--pages',
        type=int,
        help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏'
    )
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    detail_group = parser.add_argument_group('–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
    detail_group.add_argument(
        '--detailed',
        action='store_true',
        help='–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö —á–µ—Ä–µ–∑ Mayak API'
    )
    
    detail_group.add_argument(
        '--cookies',
        type=str,
        help='Cookies –¥–ª—è Mayak API –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏'
    )
    
    detail_group.add_argument(
        '--cookies-file',
        type=str,
        help='–§–∞–π–ª —Å cookies –¥–ª—è Mayak API'
    )
    
    detail_group.add_argument(
        '--max-products',
        type=int,
        default=20,
        help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 20)'
    )
    
    detail_group.add_argument(
        '--sort-by-sales',
        action='store_true',
        help='–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º (–æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É)'
    )
    
    detail_group.add_argument(
        '--show-table',
        action='store_true', 
        help='–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã —Å –ø—Ä–æ–¥–∞–∂–∞–º–∏'
    )
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–≤–æ–¥–∞
    output_group = parser.add_argument_group('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–≤–æ–¥–∞')
    output_group.add_argument(
        '-s', '--save',
        type=str,
        nargs='?',
        const='auto',
        help='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª'
    )
    
    output_group.add_argument(
        '--format',
        choices=['list', 'json', 'csv'],
        default='json',
        help='–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: json)'
    )
    
    output_group.add_argument(
        '--quiet',
        action='store_true',
        help='–¢–∏—Ö–∏–π —Ä–µ–∂–∏–º'
    )
    
    output_group.add_argument(
        '--total',
        action='store_true',
        help='–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤'
    )
    
    return parser.parse_args()


def load_cookies_from_file(filepath: str) -> str:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç cookies –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            return f.read().strip()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ cookies: {e}")
        return ""


def format_output(data, format_type='json'):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–≤–æ–¥–∞"""
    if format_type == 'json':
        return json.dumps(data, ensure_ascii=False, indent=2)
    elif format_type == 'csv':
        # –î–ª—è CSV –Ω—É–∂–Ω–∞ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        return json.dumps(data, ensure_ascii=False, indent=2)  # –ü–æ–∫–∞ JSON
    else:  # list
        if isinstance(data, dict):
            if 'found_ids' in data:
                lines = [f"–ó–∞–ø—Ä–æ—Å: {data.get('query', 'N/A')}"]
                lines.append(f"–ù–∞–π–¥–µ–Ω–æ ID: {len(data['found_ids'])}")
                if data.get('detailed_info'):
                    lines.append(f"–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {len(data['detailed_info'])} —Ç–æ–≤–∞—Ä–æ–≤")
                lines.append("ID —Ç–æ–≤–∞—Ä–æ–≤:")
                for i, product_id in enumerate(data['found_ids'], 1):
                    lines.append(f"{i:3d}. {product_id}")
                return '\n'.join(lines)
            elif isinstance(data, list):
                return '\n'.join(str(item) for item in data)
        return str(data)


def save_results(data, filename, format_type='json'):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª"""
    try:
        if filename == 'auto':
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            if isinstance(data, dict) and 'query' in data:
                safe_query = data['query'].replace(' ', '_').replace('/', '_')
                filename = f"wb_full_{safe_query}.{format_type if format_type != 'list' else 'txt'}"
            else:
                filename = f"wb_full_results.{format_type if format_type != 'list' else 'txt'}"
        
        content = format_output(data, format_type)
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(content)
        
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI"""
    args = parse_arguments()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if not args.query and not args.ids:
        print("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ª–∏–±–æ --query –¥–ª—è –ø–æ–∏—Å–∫–∞, –ª–∏–±–æ --ids –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤")
        sys.exit(1)
    
    # –ü–æ–ª—É—á–∞–µ–º cookies –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    cookies = None
    if args.detailed:
        if args.cookies:
            cookies = args.cookies
        elif args.cookies_file:
            cookies = load_cookies_from_file(args.cookies_file)
        
        if not cookies:
            print("‚ùå –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å cookies —á–µ—Ä–µ–∑ --cookies –∏–ª–∏ --cookies-file")
            sys.exit(1)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    if args.quiet:
        import logging
        logging.getLogger().setLevel(logging.ERROR)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä
        parser = WBParser(mayak_cookies=cookies if args.detailed else None)
        
        if args.ids:
            # –†–∞–±–æ—Ç–∞–µ–º —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ ID
            ids_list = [int(id_str.strip()) for id_str in args.ids.split(',')]
            
            if not args.quiet:
                print(f"üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è {len(ids_list)} —Ç–æ–≤–∞—Ä–æ–≤")
            
            if args.detailed:
                detailed_info = parser.get_products_detailed_info(ids_list)
                result = {
                    'mode': 'ids',
                    'ids': ids_list,
                    'detailed_info': detailed_info,
                    'total_detailed': len(detailed_info)
                }
            else:
                result = {
                    'mode': 'ids',
                    'ids': ids_list,
                    'total': len(ids_list)
                }
        
        else:
            # –ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É
            if not args.quiet:
                print(f"üîç –ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{args.query}'")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ
            if args.total and not args.quiet:
                total = parser.get_total_products(args.query)
                print(f"üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {total}")
            
            if args.detailed:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                result = parser.search_and_get_detailed_info(
                    args.query, 
                    args.page, 
                    args.max_products
                )
            else:
                # –¢–æ–ª—å–∫–æ ID
                if args.pages:
                    # –ù–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü
                    all_ids = []
                    for page in range(1, args.pages + 1):
                        if not args.quiet:
                            print(f"üìÑ –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}...")
                        page_ids = parser.search_products(args.query, page)
                        if not page_ids:
                            break
                        all_ids.extend(page_ids)
                    
                    result = {
                        'query': args.query,
                        'pages': args.pages,
                        'found_ids': all_ids,
                        'total_found': len(all_ids)
                    }
                else:
                    # –û–¥–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞
                    product_ids = parser.search_products(args.query, args.page)
                    result = {
                        'query': args.query,
                        'page': args.page,
                        'found_ids': product_ids,
                        'total_found': len(product_ids)
                    }
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if result:
            if not args.quiet:
                if 'total_found' in result:
                    print(f"üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {result['total_found']}")
                if 'total_detailed' in result:
                    print(f"üìã –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {result['total_detailed']} —Ç–æ–≤–∞—Ä–æ–≤")
                
                if not args.detailed or args.format != 'json':
                    print("\n" + "="*60)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –ø—Ä–æ–¥–∞–∂–∞–º–∏ –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ
            if args.show_table and result.get('detailed_info'):
                if not args.quiet:
                    print("\n" + parser.display_products_by_sales(result['detailed_info']))
                    print()
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –≤—ã–≤–æ–¥–∏–º
            if args.quiet and args.format == 'json':
                print(format_output(result, args.format))
            elif not args.quiet:
                if not args.show_table:  # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–∞, –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º
                    print(format_output(result, args.format))
                    print("="*60)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if args.save:
                save_results(result, args.save, args.format)
        
        else:
            if not args.quiet:
                print("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")
            sys.exit(1)
    
    except Exception as e:
        if not args.quiet:
            print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
