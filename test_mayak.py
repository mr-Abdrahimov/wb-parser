#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç Mayak API —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
"""

from mayak_api import MayakAPI, parse_cookies_string


def test_cookies_parsing():
    """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ cookies"""
    print("üß™ –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ cookies...")
    
    cookies_str = "cookie1=value1; cookie2=value2; cookie3=value3"
    parsed = parse_cookies_string(cookies_str)
    
    expected = {
        'cookie1': 'value1',
        'cookie2': 'value2', 
        'cookie3': 'value3'
    }
    
    if parsed == expected:
        print("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ cookies —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return True
    else:
        print(f"‚ùå –ü–∞—Ä—Å–∏–Ω–≥ cookies –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –û–∂–∏–¥–∞–ª–æ—Å—å: {expected}, –ø–æ–ª—É—á–µ–Ω–æ: {parsed}")
        return False


def test_codes_splitting():
    """–¢–µ—Å—Ç —Ä–∞–∑–±–∏–µ–Ω–∏—è –∫–æ–¥–æ–≤ –Ω–∞ —á–∞–Ω–∫–∏"""
    print("üß™ –¢–µ—Å—Ç —Ä–∞–∑–±–∏–µ–Ω–∏—è –∫–æ–¥–æ–≤ –Ω–∞ —á–∞–Ω–∫–∏...")
    
    api = MayakAPI()
    codes = list(range(1, 51))  # 50 –∫–æ–¥–æ–≤
    
    chunks = api.split_codes_to_chunks(codes, 20)
    
    if len(chunks) == 3 and len(chunks[0]) == 20 and len(chunks[1]) == 20 and len(chunks[2]) == 10:
        print("‚úÖ –†–∞–∑–±–∏–µ–Ω–∏–µ –∫–æ–¥–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return True
    else:
        print(f"‚ùå –†–∞–∑–±–∏–µ–Ω–∏–µ –∫–æ–¥–æ–≤ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ü–æ–ª—É—á–µ–Ω–æ {len(chunks)} —á–∞–Ω–∫–æ–≤")
        return False


def test_mayak_api_init():
    """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Mayak API"""
    print("üß™ –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Mayak API...")
    
    try:
        # –¢–µ—Å—Ç —Å cookies —Å—Ç—Ä–æ–∫–æ–π
        cookies_str = "test_cookie=test_value"
        api1 = MayakAPI(cookies_str)
        
        # –¢–µ—Å—Ç —Å cookies —Å–ª–æ–≤–∞—Ä–µ–º
        cookies_dict = {"test_cookie": "test_value"}
        api2 = MayakAPI(cookies_dict)
        
        # –¢–µ—Å—Ç –±–µ–∑ cookies
        api3 = MayakAPI()
        
        print("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Mayak API —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return True
    except Exception as e:
        print(f"‚ùå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Mayak API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e}")
        return False


def test_api_request_structure():
    """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –∫ API (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞)"""
    print("üß™ –¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –∫ API...")
    
    try:
        api = MayakAPI()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ URL —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        base_url = api.BASE_URL
        endpoint = api.PRODUCTS_ENDPOINT
        max_codes = api.MAX_CODES_PER_REQUEST
        
        if (base_url == "https://app.mayak.bz/api/v1/" and 
            endpoint == "wb/products" and 
            max_codes == 20):
            print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ API –∑–∞–ø—Ä–æ—Å–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è")
            return True
        else:
            print("‚ùå –°—Ç—Ä—É–∫—Ç—É—Ä–∞ API –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ API: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Mayak API —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")
    print("=" * 50)
    
    tests = [
        test_cookies_parsing,
        test_codes_splitting,
        test_mayak_api_init,
        test_api_request_structure
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        if test():
            passed += 1
        print()
    
    print("=" * 50)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("\nüí° –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –†–µ–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ Mayak API —Ç—Ä–µ–±—É—é—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö cookies")
        return True
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        return False


if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)
